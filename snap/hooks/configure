#!/bin/sh -e

# log start of the configure hook 
##logger "*** start configure hook ***"

# set variable(s)
##CONFIGDIR="${SNAP_COMMON}/Config"

# Obtain variables values (e.g. example of using snap set)
##LOGLEVEL="$(snapctl get log-level)"


### functions
# updatefunc()
#  this function will update the default.conf file
##updatefunc()
##{
##  logger " ** start updatefunc **"
##  tag=$1
##  updatevalue=$2
##  file=$3
##  logger " tag: ${tag}, updatevalue: ${updatevalue}, file: ${file}"
  # pull current tag value from default config
##  value=$(grep "<${tag}>.*<.${tag}>" ${file} | sed -e "s/^.*<${tag}/<${tag}/" | cut -f2 -d">" | cut -f1 -d"<")
##  logger " value: ${value} for tag: ${tag} (pulled from ${file})"
  # modify current and new tag to be used with sed
##  value=$(echo ${value} | sed 's;/;\\/;g')
##  updatevalue=$(echo ${updatevalue} | sed 's;/;\\/;g')
  # modify default config
##  sed -i "s/<${tag}>$value<\/${tag}>/<${tag}>$updatevalue<\/${tag}>/" ${file}
  # pull current updatevalue value from default config
##  value=$(grep "<${tag}>.*<.${tag}>" ${file} | sed -e "s/^.*<${tag}/<${tag}/" | cut -f2 -d">" | cut -f1 -d"<")
##  logger " value: ${value} for tag: ${tag} (pulled from ${file} after modification)"
##  logger " ** end updatefunc **"
##}


### Main script starts here 
# Validate LOGLEVEL
##if expr "$LOGLEVEL" : '^Warn$' > /dev/null || expr "$LOGLEVEL" : '^Debug$' > /dev/null; then
##  logger "\"$LOGLEVEL\" passed validation (Warn or Debug) so will modify default.config"
##  updatefunc LogLevel $LOGLEVEL ${CONFIGDIR}/default.config
##  if [ -f ${CONFIGDIR}/custom.config ]; then
##    updatefunc LogLevel $LOGLEVEL ${CONFIGDIR}/custom.config
##  fi
##elif [ -z $LOGLEVEL ]; then
##  logger "LOGLEVEL: \"$LOGLEVEL\" is not set - do nothing"
##else
##  echo "\"$LOGLEVEL\" is not a valid LogLevel" >&2
##  echo '  (e.g. LogLevel: Warn or Debug)' >&2
##  exit 1
##fi

# log ending of configure hook
##logger "*** end configure hook ***"

